import React, { useState } from 'react';
import styled from 'styled-components';

const Container = styled.div`
	width: 90%;
	padding: 1rem 1.5rem;
	flex-direction: column;
	align-items: center;
	position: absolute;
	border-radius: 20px;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);
	gap: 1rem;
	background-color: rgba(0, 0, 0, 0.7);
	user-select: none;
`;

const Main = styled.div`
	text-align: center;
	font-size: 2.2rem;
	white-space: nowrap;
	padding: 1rem 0;
	.lists {
		font-size: 0.7em;
	}
	.list {
		padding: 0.2em 0;
		button {
			text-align: left;
			white-space: normal;
			display: flex;
			flex-direction: column;
			width: 100%;
			color: ${props => props.theme.color.main};
			background-color: transparent;
			.question {
				padding: 0.2em 0;
			}
			.answer {
				color: yellow;
				padding: 0.1em 0 0.3em 0;
				border-bottom: 1px solid ${props => props.theme.color.main};
			}
		}
	}
`;

const FaqBtn = styled.button<FaqStyleProps>`
	border-top: ${props =>
		props.isActive === true
			? `1px solid ${props.theme.color.main}`
			: 'none'};
`;

const Title = styled.div`
	color: ${props => props.theme.color.main};
	text-align: center;
`;

const Cancel = styled.div`
	width: 100%;
	& > button {
		width: 100%;
		background-color: #ffffff20;
		border-radius: 20px;
		padding: 0.8em 0;
		color: ${props => props.theme.color.main};
	}
`;

type HintDialogProps = {
	setHintDialog: React.Dispatch<React.SetStateAction<boolean>>;
};

interface FaqStyleProps {
	isActive: boolean;
}

type Qna = {
	id: number;
	question: string;
	answer: string;
	isVisible: boolean;
};
type Faq = Qna[];

function Hint({ setHintDialog }: HintDialogProps) {
	const [faq, setFaq] = useState<Faq>([
		{
			id: 1,
			question: 'Ï£ºÏöîÍ∏∞Îä•Ïù¥ Í∂ÅÍ∏àÌï©ÎãàÎã§',
			answer: `Í≥ÑÏÇ∞ÏùÑ ÏõêÌïòÎäî ÎèÑÏãúÎ•º ÏÑ†ÌÉùÌïú ÌõÑ ÌïòÎã®Ïùò Í±¥Î¨ºÏòµÏÖòÍ≥º Íµ¨Îß§, ÏßÄÎ∂à Îì±Ïùò Ïª§Îß®ÎìúÎ•º ÏàúÏÑúÎåÄÎ°ú ÌÑ∞ÏπòÌïòÎ©¥ Ï†ïÌôïÌïú Ï†ïÏÇ∞Í∞ÄÍ≤©Ïù¥ ÌëúÏãúÎê©ÎãàÎã§.
            ÎèÑÏãúÏπ¥ÎìúÎ•º Í∏∏Í≤å ÌÑ∞ÏπòÌïòÎ©¥ ÎèÑÏãúÏùò ÏÜåÏú†Ïó¨Î∂ÄÎ•º Î≥ÄÍ≤ΩÌïòÍ±∞ÎÇò ÎèÑÏãúÏóê Ï∂ïÏ†úÎÇò Ïò¨Î¶ºÌîΩ Ïó¨Î∂ÄÎ•º ÌëúÏãúÌï† Ïàò ÏûàÏäµÎãàÎã§.`,
			isVisible: false,
		},
		{
			id: 2,
			question: 'ÎèÑÏãúÏùò Í∞ÄÍ≤©Îì§Ïù¥ Ï†úÌíàÏùò ÎÇ¥Ïö©Í≥º Îã¨ÎùºÏöî',
			answer: 'Í∞úÎ∞úÏûêÍ∞Ä ÏßÅÏ†ë ÏÇ¨Ïö©ÌïòÎ†§Í≥† ÎßåÎì† Ïï±Ïù¥Î©∞ Î∞∏Îü∞Ïä§ Ï°∞Ï†ïÏÉÅ Í∞ÄÍ≤© Îì±Ïù¥ Î≥¥ÎìúÍ≤åÏûÑ Î©îÎâ¥ÏñºÍ≥º Îã§Î•º Ïàò ÏûàÏäµÎãàÎã§. Í∞úÎ∞úÏûêÍ∞Ä ÏûÑÏùòÎ°ú ÏàòÏπòÏ°∞Ï†ïÏùÑ Ìïú Î∂ÄÎ∂ÑÏóê ÎåÄÌï¥ÏÑúÎäî ÏñëÌï¥Î•º Íµ¨Ìï©ÎãàÎã§.',
			isVisible: false,
		},
		{
			id: 3,
			question:
				'ÎûúÎìúÎßàÌÅ¨Î•º ÎïÖ, Î≥ÑÏû•, ÎπåÎî©, Ìò∏ÌÖîÍ≥º ÎèôÏãúÏóê ÏÑ†ÌÉùÌï† Ïàò ÏóÜÏñ¥Ïöî',
			answer: 'ÎûúÎìúÎßàÌÅ¨Îäî Ïù∏ÏàòÍ∞Ä Î∂àÍ∞ÄÎä•ÌïòÎ©∞ Î≥ÑÏû•Î∂ÄÌÑ∞ Ìò∏ÌÖîÍπåÏßÄ Î™®Îì† Í±¥Î¨ºÏù¥ Ïò¨Î†§ÏßÑ ÏÉÅÌÉúÏóêÏÑú Íµ¨Îß§Í∞Ä Í∞ÄÎä•Ìïú ÌäπÏàòÌïú Í±¥Î¨ºÏûÖÎãàÎã§. Îî∞ÎùºÏÑú Ïù¥Îü∞ Ï†úÏïΩÏùÄ Ïù¥Ïö©ÏûêÍ∞Ä Í≤åÏûÑ Î£∞Ïóê Ïñ¥Í∏ãÎÇú ÌñâÏúÑÎ•º ÌïòÎäîÍ≤ÉÏùÑ ÎØ∏Î¶¨ Î∞©ÏßÄÌï©ÎãàÎã§. Ïù¥ Ïô∏ÏóêÎèÑ Í¥ÄÍ¥ëÏßÄ Îì±Ïùò ÌäπÏàòÌïú Í≤ΩÏö∞ÏóêÎèÑ ÎèôÏùºÌïú Î°úÏßÅÏù¥ Ï†ÅÏö©ÎêòÏñ¥ ÏûàÏäµÎãàÎã§.',
			isVisible: false,
		},
	]);

	function toggleAnswer(qna: Qna) {
		setFaq(faq => {
			let updated = [...faq];
			const index = updated.findIndex(item => item.id === qna.id);
			if (index >= 0 && faq[index]?.isVisible === true) {
				updated[index] = { ...qna, isVisible: false };
			} else {
				updated.map(qna => {
					if (qna.isVisible === true) {
						qna.isVisible = false;
					}
				});
				updated[index] = { ...qna, isVisible: !qna.isVisible };
			}

			return updated;
		});
	}
	return (
		<>
			<Container>
				<Title>
					<h2>FAQ</h2>
				</Title>
				<Main>
					<ul className='lists'>
						{faq.map(qna => (
							<li className='list' key={qna.id}>
								<FaqBtn
									isActive={qna.isVisible}
									onClick={() => toggleAnswer(qna)}
								>
									<span className='question'>
										üí† {qna.question} <br />
									</span>
									{qna.isVisible && (
										<span className='answer'>
											‚Ü™ {qna.answer.split('.')[0]}. <br />
											{qna.answer.split('.')[1]}.
										</span>
									)}
								</FaqBtn>
							</li>
						))}
					</ul>
				</Main>
				<Cancel>
					<button onClick={() => setHintDialog(false)}>
						<i className='fas fa-arrow-rotate-left'></i> Ïù¥Ï†ÑÏúºÎ°ú
					</button>
				</Cancel>
			</Container>
		</>
	);
}

export default Hint;
